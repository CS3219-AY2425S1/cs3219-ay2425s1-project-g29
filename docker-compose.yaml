services:
  kafka:
    image: 'bitnami/kafka:latest'
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list"]
      interval: 3s
      timeout: 3s
      retries: 5
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - backend_network  

  init-kafka:
    image: bitnami/kafka:3

    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    networks:
      - backend_network
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      echo -e 'Creating kafka topics'

      kafka-topics.sh --create --if-not-exists --topic match_results --replication-factor=1 --partitions=1 --bootstrap-server kafka:9092 
      kafka-topics.sh --create --if-not-exists --topic question_results --replication-factor=1 --partitions=1 --bootstrap-server kafka:9092 
      kafka-topics.sh --create --if-not-exists --topic match_requests --replication-factor=1 --partitions=1 --bootstrap-server kafka:9092 

      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      "

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend_network

  ui:
    container_name: ui
    build:
      context: ./frontend/Peerprep
      dockerfile: Dockerfile
    volumes:
      - ./frontend/Peerprep:/src
      # - node_modules:/src/node_modules  # Only for development
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development  # production
      - CHOKIDAR_USEPOLLING=true  # For Windows machines, so file changes are detected by nuxt
    networks:
      - backend_network
    depends_on:
      - question_service
      - user_service

  matching_service:
    container_name: matching_service
    build:
      context: ./backend/matching_service
    environment:
      - FLASK_ENV=development 
      - FLASK_APP=run.py 
      - TZ=Asia/Shanghai
    ports:
      - "8000:8000"
      - "8001:8001"
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./backend/matching_service:/app
    networks:
      - backend_network
 

  question_service:
    container_name: question_service
    image: question_service
    build:
      context: ./backend/question_service
      dockerfile: Dockerfile
    networks:
      - backend_network
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "5000:5000"

  user_service:
    container_name: user_service
    image: user_service
    build:
      context: ./backend/user_service
      dockerfile: Dockerfile
    environment:
      - FLASK_ENV=development  # development
    networks:
      - backend_network
    ports:
      - "5001:5001"

  chat_service:
    container_name: chat_service
    build:
      context: ./backend/chat_service
      dockerfile: Dockerfile
    ports:
      - "5002:5002"
    networks:
      - backend_network

volumes:
  redis_data:
  kafka_data:
  node_modules:  # For ui dev mode

networks:
  backend_network: 
    driver: bridge